#include "Enes100.h"
#include "Tank.h"
#include "math.h"
#include <Wire.h>
#include <Adafruit_MotorShield.h>
// Create the motor shield object with the default I2C address
Adafruit_MotorShield AFMS = Adafruit_MotorShield(0x60); 
// Or, create it with a different I2C address (say for stacking)
// Adafruit_MotorShield AFMS = Adafruit_MotorShield(0x61); 

// Select which 'port' M1, M2, M3 or M4. In this case, M
// You can also make another motor on port M2
//Adafruit_DCMotor *myOtherMotor = AFMS.getMotor(2);

Adafruit_DCMotor *motor1 = AFMS.getMotor(1);
Adafruit_DCMotor *motor2 = AFMS.getMotor(2);
const int rightPin1 = 9;
const int rightPin2 = 8;

//LEFT SENSOR SETUP
const int leftPin1 = 6;

const int leftPin2 = 5;

// defines variables

long durationLeft;
long durationRight;


int distanceRight;
int distanceLeft;



//functions:

  /*float currentTheta = ENES100.location.theta
  double leftDistanceSensor = Tank.readDistanceSensor(0);
  double rightDistanceSensor = Tank.readDistanceSensor(2);
  turnRight() {
    ENES100.updateLocation();
    
  }*/

  void InitialY () {
    Enes100.updateLocation();
    while (1.57 - Enes100.location.theta > 0.05) {
      motor1->run(BACKWARD);
      for (int i=0; i<255; i++) {
        motor1->setSpeed(i);
      } // Tank.setLeftMotorPWM(-255);
        motor2->run(FORWARD);
      for (int i=0; i<255; i++) {
        motor2->setSpeed(i);
      } //Tank.setRightMotorPWM(255);

      
      Enes100.updateLocation();
      Enes100.print("theta :");
      Enes100.println(Enes100.location.theta);
      delay(0.0001);
    }
  
    while (Enes100.location.y < 1.6) {

      motor1->run(RELEASE);
      motor2->run(RELEASE);// Tank.turnOffMotors();
      motor1->run(FORWARD);
        for (int i=0; i<255; i++) {
          motor1->setSpeed(i);
        }// Tank.setLeftMotorPWM(255);
       motor2->run(FORWARD);
        for (int i=0; i<255; i++) {
          motor2->setSpeed(i);
        }//Tank.setRightMotorPWM(255); 

  
    Enes100.updateLocation();
    delay(0.0001);
    
    }
    
    if (Enes100.location.y > 1.6){
      while (fabs(Enes100.location.theta) > 0.05) {
        motor1->run(BACKWARD);
          for (int i=0; i<255; i++) {
            motor1->setSpeed(i);
        } // Tank.setLeftMotorPWM(-255);
        motor2->run(FORWARD);
        for (int i=0; i<255; i++) {
          motor2->setSpeed(i);
        }//  Tank.setRightMotorPWM(255);
      Enes100.updateLocation();
      Enes100.print("theta :");
      Enes100.println(Enes100.location.theta);
      delay(0.0001);
    }
    
}
}

  void 

/*  void gostraight(int x){

  
  }


  void turnRight(int x){

    
  }

  void turnLeft(int x) {
    
    
  }

  void gotoPayload(int x){


    
  }*/



void setup() {
  Enes100.begin("The Professionals", DATA, 9, 3, 2);
  Tank.begin();

  Serial.begin(9600);           // set up Serial library at 9600 bps
  Serial.println("Adafruit Motorshield v2 - DC Motor test!");

  AFMS.begin(1600);  // create with the default frequency 1.6KHz
  //AFMS.begin(1000);  // OR with a different frequency, say 1KHz
  
  // Set the speed to start, from 0 (off) to 255 (max speed)
  motor1->setSpeed(255);
  motor1->run(FORWARD);
  // turn on motor
  uint8_t i;
  
  Serial.print("tick");
  
  motor1->run(FORWARD);
  for (i=0; i<255; i++) {
    motor1->setSpeed(i);
  }

  // Set the speed to start, from 0 (off) to 255 (max speed)
  motor2->setSpeed(255);
  motor2->run(FORWARD);
  // turn on motor
  
  Serial.print("tick");

  motor2->run(FORWARD);
  for (i=0; i<255; i++) {
    motor1->setSpeed(i);
  }



pinMode(rightPin1, OUTPUT); // Sets the trigPin as an Output
  pinMode(rightPin2, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600); // Starts the serial communication

  pinMode(leftPin1, OUTPUT); // Sets the trigPin as an Output
  pinMode(leftPin2, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600); // Starts the serial communication


}


void loop() {
//Initializes the ultrasonic sensors.
// Clears the trigPin
  digitalWrite(rightPin1, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(rightPin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(rightPin1, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  durationLeft = pulseIn(rightPin2, HIGH);
  // Calculating the distance
  distanceLeft= durationLeft*0.034/2;
  // Prints the distance on the Serial Monitor
  Serial.print("Distance RIGHT SENSOR: ");
  Serial.println(distanceLeft);

  // Clears the trigPin
  digitalWrite(leftPin1, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(leftPin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(leftPin1, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  durationRight = pulseIn(leftPin2, HIGH);
  // Calculating the distance
  distanceRight= durationRight*0.034/2;
  // Prints the distance on the Serial Monitor
  Serial.print("Distance LEFT SENSOR: ");
  Serial.println(distanceRight);

  
  InitialY();

}
