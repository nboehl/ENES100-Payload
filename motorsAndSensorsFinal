#include <Wire.h>
#include <Adafruit_MotorShield.h>



// RIGHT SENSOR SETUP
const int rightPin1 = 9;
const int rightPin2 = 8;


//LEFT SENSOR SETUP
const int leftPin1 = 5;

const int leftPin2 = 4;

// defines variables

long duration;

int distance;



// Create the motor shield object with the default I2C address
Adafruit_MotorShield AFMS = Adafruit_MotorShield(0x60); 
// Or, create it with a different I2C address (say for stacking)
// Adafruit_MotorShield AFMS = Adafruit_MotorShield(0x61); 

// Select which 'port' M1, M2, M3 or M4. In this case, M
// You can also make another motor on port M2
//Adafruit_DCMotor *myOtherMotor = AFMS.getMotor(2);

Adafruit_DCMotor *motor1 = AFMS.getMotor(1);
Adafruit_DCMotor *motor2 = AFMS.getMotor(2);



void setup() {
  // put your setup code here, to run once:

  pinMode(rightPin1, OUTPUT); // Sets the trigPin as an Output
  pinMode(rightPin2, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600); // Starts the serial communication

  pinMode(leftPin1, OUTPUT); // Sets the trigPin as an Output
  pinMode(leftPin2, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600); // Starts the serial communication

  

 Serial.begin(9600);           // set up Serial library at 9600 bps
  Serial.println("Adafruit Motorshield v2 - DC Motor test!");

  AFMS.begin(1600);  // create with the default frequency 1.6KHz
  //AFMS.begin(1000);  // OR with a different frequency, say 1KHz
  
  // Set the speed to start, from 0 (off) to 255 (max speed)
  motor1->setSpeed(255);
  motor1->run(BACKWARD);
  // turn on motor
  uint8_t i;
  
  Serial.print("tick");

  motor1->run(BACKWARD);
  for (i=0; i<255; i++) {
    motor1->setSpeed(i);
  }

  // Set the speed to start, from 0 (off) to 255 (max speed)
  motor2->setSpeed(255);
  motor2->run(BACKWARD);
  // turn on motor
  
  Serial.print("tick");

  motor2->run(BACKWARD);
  for (i=0; i<255; i++) {
    motor1->setSpeed(i);
  }

  
}




void loop() {

  
  // put your main code here, to run repeatedly:
  // Clears the trigPin
  digitalWrite(rightPin1, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(rightPin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(rightPin1, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(rightPin2, HIGH);
  // Calculating the distance
  distance= duration*0.034/2;
  // Prints the distance on the Serial Monitor
  Serial.print("Distance RIGHT SENSOR: ");
  Serial.println(distance);



  // Clears the trigPin
  digitalWrite(leftPin1, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(leftPin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(leftPin1, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(leftPin2, HIGH);
  // Calculating the distance
  distance= duration*0.034/2;
  // Prints the distance on the Serial Monitor
  Serial.print("Distance LEFT SENSOR: ");
  Serial.println(distance);
  
}
